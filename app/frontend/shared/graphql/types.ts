export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BinaryString: any;
  FormId: any;
  ISO8601Date: any;
  ISO8601DateTime: any;
  JSON: any;
};

/** Autogenerated return type of AccountAvatarAdd. */
export type AccountAvatarAddPayload = {
  __typename?: 'AccountAvatarAddPayload';
  /** The newly created avatar. */
  avatar?: Maybe<Avatar>;
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
};

/** Autogenerated return type of AccountAvatarDelete. */
export type AccountAvatarDeletePayload = {
  __typename?: 'AccountAvatarDeletePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the avatar deletion successful? */
  success: Scalars['Boolean'];
};

/** Autogenerated return type of AccountLocale. */
export type AccountLocalePayload = {
  __typename?: 'AccountLocalePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the update successful? */
  success: Scalars['Boolean'];
};

/** Objects used to build activity message */
export type ActivityMessageMetaObject = DataPrivacyTask | Group | Organization | Role | Ticket | TicketArticle | User;

/** A field which may contain one or more email or other addresses. */
export type AddressesField = {
  __typename?: 'AddressesField';
  /** If email addresses were found and parseable, this will hold the parsed result. */
  parsed?: Maybe<Array<EmailAddress>>;
  /** Unparsed content of the addresses field. */
  raw: Scalars['String'];
};

/** Autogenerated return type of AppMaintenance. */
export type AppMaintenancePayload = {
  __typename?: 'AppMaintenancePayload';
  /** Maintenance type, may trigger actions in the front end */
  type?: Maybe<EnumAppMaintenanceType>;
};

/** Type that represents an autocomplete entry. */
export type AutocompleteEntry = {
  __typename?: 'AutocompleteEntry';
  disabled?: Maybe<Scalars['Boolean']>;
  heading?: Maybe<Scalars['String']>;
  headingPlaceholder?: Maybe<Array<Scalars['String']>>;
  icon?: Maybe<Scalars['String']>;
  label: Scalars['String'];
  labelPlaceholder?: Maybe<Array<Scalars['String']>>;
  value: Scalars['String'];
};

/** Avatar for users */
export type Avatar = {
  __typename?: 'Avatar';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  default: Scalars['Boolean'];
  deletable: Scalars['Boolean'];
  id: Scalars['ID'];
  imageFull?: Maybe<Scalars['String']>;
  imageResize?: Maybe<Scalars['String']>;
  initial: Scalars['Boolean'];
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** The fields for uploading a new avatar. */
export type AvatarInput = {
  /** The full image to use for the avatar (Base64 encoded). */
  full: Scalars['String'];
  /** The resized/cropped image to use for the avatar (Base64 encoded). */
  resize: Scalars['String'];
};

/** Autogenerated return type of ConfigUpdates. */
export type ConfigUpdatesPayload = {
  __typename?: 'ConfigUpdatesPayload';
  /** Updated setting */
  setting?: Maybe<KeyComplexValue>;
};

/** Data privacy task type */
export type DataPrivacyTask = {
  __typename?: 'DataPrivacyTask';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  deletableId?: Maybe<Scalars['Int']>;
  deletableType?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  state?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Represents a parsed email address. */
export type EmailAddress = {
  __typename?: 'EmailAddress';
  /** Email address. */
  emailAddress?: Maybe<Scalars['String']>;
  /** Display name + comment part of email (if any). */
  name?: Maybe<Scalars['String']>;
};

/** Possible AppVersion messages */
export enum EnumAppMaintenanceType {
  /** A new version of the app is available. */
  AppVersion = 'app_version',
  /** The app configuration has changed. */
  ConfigChanged = 'config_changed',
  /** App is restarting. */
  RestartAuto = 'restart_auto',
  /** App needs a restart. */
  RestartManual = 'restart_manual'
}

/** All available form updaters */
export enum EnumFormUpdaterId {
  FormUpdaterUpdaterOrganizationEdit = 'FormUpdater__Updater__Organization__Edit',
  FormUpdaterUpdaterTicketCreate = 'FormUpdater__Updater__Ticket__Create',
  FormUpdaterUpdaterUserCreate = 'FormUpdater__Updater__User__Create',
  FormUpdaterUpdaterUserEdit = 'FormUpdater__Updater__User__Edit'
}

/** All backend managed objects */
export enum EnumObjectManagerObjects {
  Group = 'Group',
  Organization = 'Organization',
  Ticket = 'Ticket',
  TicketArticle = 'TicketArticle',
  User = 'User'
}

/** Option to choose SQL sorting direction */
export enum EnumOrderDirection {
  /** Sort with ascending order */
  Ascending = 'ASCENDING',
  /** Sort with descending order */
  Descending = 'DESCENDING'
}

/** All available public links screens */
export enum EnumPublicLinksScreen {
  Login = 'login',
  PasswordReset = 'password_reset',
  Signup = 'signup'
}

/** All searchable models */
export enum EnumSearchableModels {
  Organization = 'Organization',
  Ticket = 'Ticket',
  User = 'User'
}

/** Option to choose SQL sorting direction */
export enum EnumTextDirection {
  /** Left-to-right */
  Ltr = 'ltr',
  /** Right-to-left */
  Rtl = 'rtl'
}

/** Represents the form changed field information. */
export type FormUpdaterChangedFieldInput = {
  /** Changed field name */
  name: Scalars['String'];
  /** New value from changed field */
  newValue?: InputMaybe<Scalars['JSON']>;
  /** Old value from changed field */
  oldValue?: InputMaybe<Scalars['JSON']>;
};

/** Represents the form meta information. */
export type FormUpdaterMetaInput = {
  /** Changed field information */
  changedField?: InputMaybe<FormUpdaterChangedFieldInput>;
  /** Generated frontend form ID */
  formId: Scalars['FormId'];
  /** Initial form updater request */
  initial?: InputMaybe<Scalars['Boolean']>;
  /** Generated frontend request ID */
  requestId?: InputMaybe<Scalars['String']>;
};

/** Represents the relation field information. */
export type FormUpdaterRelationField = {
  /** Optional filter ids from the frontend */
  filterIds?: InputMaybe<Array<Scalars['Int']>>;
  /** Field name of the relation field */
  name: Scalars['String'];
  /** Relation name for the current field (e.g. group) */
  relation: Scalars['String'];
};

/** Autogenerated return type of FormUploadCacheAdd. */
export type FormUploadCacheAddPayload = {
  __typename?: 'FormUploadCacheAddPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Information about the uploaded files. */
  uploadedFiles: Array<StoredFile>;
};

/** Autogenerated return type of FormUploadCacheRemove. */
export type FormUploadCacheRemovePayload = {
  __typename?: 'FormUploadCacheRemovePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the mutation successful? */
  success: Scalars['Boolean'];
};

/** Groups */
export type Group = {
  __typename?: 'Group';
  active: Scalars['Boolean'];
  assignmentTimeout?: Maybe<Scalars['Int']>;
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  followUpAssignment: Scalars['Boolean'];
  followUpPossible: Scalars['String'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Key/value type with complex (JSON) values. */
export type KeyComplexValue = {
  __typename?: 'KeyComplexValue';
  key: Scalars['String'];
  value?: Maybe<Scalars['JSON']>;
};

/** Key/value type with string values. */
export type KeyValue = {
  __typename?: 'KeyValue';
  key: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

/** Locales available in the system */
export type Locale = {
  __typename?: 'Locale';
  active: Scalars['Boolean'];
  alias?: Maybe<Scalars['String']>;
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  dir: EnumTextDirection;
  id: Scalars['ID'];
  locale: Scalars['String'];
  name: Scalars['String'];
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Locate an organization via id or internalId. */
export type LocatorOrganizationInput = {
  /** Organization ID */
  organizationId?: InputMaybe<Scalars['ID']>;
  /** Organization internalId */
  organizationInternalId?: InputMaybe<Scalars['Int']>;
};

/** Locate a ticket via id, internalId or number. */
export type LocatorTicketInput = {
  /** Ticket ID */
  ticketId?: InputMaybe<Scalars['ID']>;
  /** Ticket internalId */
  ticketInternalId?: InputMaybe<Scalars['Int']>;
  /** Ticket number */
  ticketNumber?: InputMaybe<Scalars['String']>;
};

/** Locate a User via id or internalId. */
export type LocatorUserInput = {
  /** User ID */
  userId?: InputMaybe<Scalars['ID']>;
  /** User internalId */
  userInternalId?: InputMaybe<Scalars['Int']>;
};

/** The user login fields. */
export type LoginInput = {
  /** Device fingerprint - a string identifying the device used for the login */
  fingerprint: Scalars['String'];
  /** User name */
  login: Scalars['String'];
  /** Password */
  password: Scalars['String'];
  /** Remember me - Session expire date will be set to one year */
  rememberMe?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of Login. */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** The current session */
  sessionId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of Logout. */
export type LogoutPayload = {
  __typename?: 'LogoutPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the logout successful? */
  success: Scalars['Boolean'];
};

/** All available mutations */
export type Mutations = {
  __typename?: 'Mutations';
  /** Add a new avatar for the currently logged in user. */
  accountAvatarAdd?: Maybe<AccountAvatarAddPayload>;
  /** Delete an existing avatar for the currently logged in user. */
  accountAvatarDelete?: Maybe<AccountAvatarDeletePayload>;
  /** Update the language of the currently logged in user */
  accountLocale?: Maybe<AccountLocalePayload>;
  /** Upload files for a form */
  formUploadCacheAdd?: Maybe<FormUploadCacheAddPayload>;
  /** Remove uploaded files for a form */
  formUploadCacheRemove?: Maybe<FormUploadCacheRemovePayload>;
  /** Performs a user login to create a session */
  login?: Maybe<LoginPayload>;
  /** End the current session */
  logout?: Maybe<LogoutPayload>;
  /** Marks notifications for active user as seen */
  onlineNotificationDelete?: Maybe<OnlineNotificationDeletePayload>;
  /** Marks notifications for active user as seen */
  onlineNotificationMarkAllAsSeen?: Maybe<OnlineNotificationMarkAllAsSeenPayload>;
  /** Update organization data. */
  organizationUpdate?: Maybe<OrganizationUpdatePayload>;
  /** Assign a tag to an object. This will create tags as needed. */
  tagAssignmentAdd?: Maybe<TagAssignmentAddPayload>;
  /** Removes a tag from an object. */
  tagAssignmentRemove?: Maybe<TagAssignmentRemovePayload>;
  /** Add a new user. */
  userAdd?: Maybe<UserAddPayload>;
  /** Update an existing user. */
  userUpdate?: Maybe<UserUpdatePayload>;
};


/** All available mutations */
export type MutationsAccountAvatarAddArgs = {
  images: AvatarInput;
};


/** All available mutations */
export type MutationsAccountAvatarDeleteArgs = {
  id: Scalars['ID'];
};


/** All available mutations */
export type MutationsAccountLocaleArgs = {
  locale: Scalars['String'];
};


/** All available mutations */
export type MutationsFormUploadCacheAddArgs = {
  files: Array<UploadFileInput>;
  formId: Scalars['FormId'];
};


/** All available mutations */
export type MutationsFormUploadCacheRemoveArgs = {
  fileIds: Array<Scalars['ID']>;
  formId: Scalars['FormId'];
};


/** All available mutations */
export type MutationsLoginArgs = {
  input: LoginInput;
};


/** All available mutations */
export type MutationsOnlineNotificationDeleteArgs = {
  onlineNotificationId: Scalars['ID'];
};


/** All available mutations */
export type MutationsOnlineNotificationMarkAllAsSeenArgs = {
  onlineNotificationIds: Array<Scalars['ID']>;
};


/** All available mutations */
export type MutationsOrganizationUpdateArgs = {
  id: Scalars['ID'];
  input: OrganizationInput;
};


/** All available mutations */
export type MutationsTagAssignmentAddArgs = {
  objectId: Scalars['ID'];
  tag: Scalars['String'];
};


/** All available mutations */
export type MutationsTagAssignmentRemoveArgs = {
  objectId: Scalars['ID'];
  tag: Scalars['String'];
};


/** All available mutations */
export type MutationsUserAddArgs = {
  input: UserInput;
};


/** All available mutations */
export type MutationsUserUpdateArgs = {
  id: Scalars['ID'];
  input: UserInput;
};

/** Data of one object attribute value of another object */
export type ObjectAttributeValue = {
  __typename?: 'ObjectAttributeValue';
  /** The object attribute record */
  attribute: ObjectManagerFrontendAttribute;
  /** The value of the current object's object attribute */
  value?: Maybe<Scalars['JSON']>;
};

/** Data of one object attribute value of another object */
export type ObjectAttributeValueInput = {
  /** The name of the current object's attribute */
  name: Scalars['String'];
  /** The value of the current object's object attribute */
  value?: InputMaybe<Scalars['JSON']>;
};

/** Custom object fields (only editable & active) */
export type ObjectAttributeValuesInterface = {
  objectAttributeValues?: Maybe<Array<ObjectAttributeValue>>;
};

/** An object manager attribute record especially for the frontend */
export type ObjectManagerFrontendAttribute = {
  __typename?: 'ObjectManagerFrontendAttribute';
  dataOption?: Maybe<Scalars['JSON']>;
  dataType: Scalars['String'];
  display: Scalars['String'];
  isInternal: Scalars['Boolean'];
  name: Scalars['String'];
  screens?: Maybe<Scalars['JSON']>;
};

/** Autogenerated return type of ObjectManagerFrontendAttributes. */
export type ObjectManagerFrontendAttributesPayload = {
  __typename?: 'ObjectManagerFrontendAttributesPayload';
  /** Attributes to be shown in the frontend */
  attributes: Array<ObjectManagerFrontendAttribute>;
  /** Screens with attributes to be shown in the frontend */
  screens: Array<ObjectManagerScreenAttributes>;
};

/** Screens with underlying attributes. */
export type ObjectManagerScreenAttributes = {
  __typename?: 'ObjectManagerScreenAttributes';
  attributes: Array<Scalars['String']>;
  name: Scalars['String'];
};

/** Online notifications for a user */
export type OnlineNotification = {
  __typename?: 'OnlineNotification';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  metaObject: ActivityMessageMetaObject;
  objectId: Scalars['Int'];
  objectName: Scalars['String'];
  seen: Scalars['Boolean'];
  typeName: Scalars['String'];
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** The connection type for OnlineNotification. */
export type OnlineNotificationConnection = {
  __typename?: 'OnlineNotificationConnection';
  /** A list of edges. */
  edges: Array<OnlineNotificationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** Autogenerated return type of OnlineNotificationDelete. */
export type OnlineNotificationDeletePayload = {
  __typename?: 'OnlineNotificationDeletePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the notification deletion successful? */
  success: Scalars['Boolean'];
};

/** An edge in a connection. */
export type OnlineNotificationEdge = {
  __typename?: 'OnlineNotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OnlineNotification;
};

/** Autogenerated return type of OnlineNotificationMarkAllAsSeen. */
export type OnlineNotificationMarkAllAsSeenPayload = {
  __typename?: 'OnlineNotificationMarkAllAsSeenPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** The seen notifications. */
  onlineNotifications?: Maybe<Array<OnlineNotification>>;
};

/** Autogenerated return type of OnlineNotificationsCount. */
export type OnlineNotificationsCountPayload = {
  __typename?: 'OnlineNotificationsCountPayload';
  /** Count of unseen notifications for the user */
  unseenCount: Scalars['Int'];
};

/** Organizations that users can belong to */
export type Organization = ObjectAttributeValuesInterface & {
  __typename?: 'Organization';
  active?: Maybe<Scalars['Boolean']>;
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  domain?: Maybe<Scalars['String']>;
  domainAssignment?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  /** Internal database ID */
  internalId: Scalars['Int'];
  members?: Maybe<UserConnection>;
  name?: Maybe<Scalars['String']>;
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  objectAttributeValues?: Maybe<Array<ObjectAttributeValue>>;
  shared?: Maybe<Scalars['Boolean']>;
  ticketsCount?: Maybe<TicketCount>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};


/** Organizations that users can belong to */
export type OrganizationMembersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The connection type for Organization. */
export type OrganizationConnection = {
  __typename?: 'OrganizationConnection';
  /** A list of edges. */
  edges: Array<OrganizationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type OrganizationEdge = {
  __typename?: 'OrganizationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Organization;
};

/** The organization insert/update fields. */
export type OrganizationInput = {
  /** The organization active flag */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The organization domain */
  domain?: InputMaybe<Scalars['String']>;
  /** The organization domain assignment flag */
  domainAssignment?: InputMaybe<Scalars['Boolean']>;
  /** The organization name */
  name?: InputMaybe<Scalars['String']>;
  /** The organization note */
  note?: InputMaybe<Scalars['String']>;
  /** Additional custom attributes (names + values) */
  objectAttributeValues?: InputMaybe<Array<ObjectAttributeValueInput>>;
  /** The organization shared flag */
  shared?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of OrganizationUpdate. */
export type OrganizationUpdatePayload = {
  __typename?: 'OrganizationUpdatePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** The updated organization. */
  organization?: Maybe<Organization>;
};

/** Autogenerated return type of OrganizationUpdates. */
export type OrganizationUpdatesPayload = {
  __typename?: 'OrganizationUpdatesPayload';
  /** Updated organization */
  organization?: Maybe<Organization>;
};

/** Ticket overviews */
export type Overview = {
  __typename?: 'Overview';
  active: Scalars['Boolean'];
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  link: Scalars['String'];
  name: Scalars['String'];
  orderBy: Scalars['String'];
  /** Columns that may be used as order_by of overview queries, with assigned label values */
  orderColumns: Array<KeyValue>;
  orderDirection: EnumOrderDirection;
  prio: Scalars['Int'];
  /** Count of tickets the authenticated user may see in this overview */
  ticketCount: Scalars['Int'];
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
  /** Columns to be shown on screen, with assigned label values */
  viewColumns: Array<KeyValue>;
};

/** The connection type for Overview. */
export type OverviewConnection = {
  __typename?: 'OverviewConnection';
  /** A list of edges. */
  edges: Array<OverviewEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type OverviewEdge = {
  __typename?: 'OverviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Overview;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Public links available in the system */
export type PublicLink = {
  __typename?: 'PublicLink';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  link: Scalars['String'];
  newTab: Scalars['Boolean'];
  title: Scalars['String'];
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Autogenerated return type of PublicLinkUpdates. */
export type PublicLinkUpdatesPayload = {
  __typename?: 'PublicLinkUpdatesPayload';
  /** Current available public links */
  publicLinks?: Maybe<Array<PublicLink>>;
};

/** Autogenerated return type of PushMessages. */
export type PushMessagesPayload = {
  __typename?: 'PushMessagesPayload';
  /** Message text */
  text?: Maybe<Scalars['String']>;
  /** Message title */
  title?: Maybe<Scalars['String']>;
};

/** All available queries */
export type Queries = {
  __typename?: 'Queries';
  /** Fetch actively used avatar of the currently logged-in user */
  accountAvatarActive?: Maybe<Avatar>;
  /** Checksum of the currently built front-end application. If this changes, the front-end(s) should reload. */
  applicationBuildChecksum: Scalars['String'];
  /** Configuration required for front end operation (more results returned for authenticated users) */
  applicationConfig: Array<KeyComplexValue>;
  /** Search for recipients */
  autocompleteSearchRecipient: Array<AutocompleteEntry>;
  /** Search for tags */
  autocompleteSearchTag: Array<AutocompleteEntry>;
  /** Search for users */
  autocompleteSearchUser: Array<AutocompleteEntry>;
  /** Information about the authenticated user */
  currentUser: User;
  /** Return updated form information for a frontend form (e.g. core workflow information or resolved relations). */
  formUpdater: Scalars['JSON'];
  /** Locales available in the system */
  locales: Array<Locale>;
  /** Fetch meta information about object manager attributes for usage in frontend. */
  objectManagerFrontendAttributes?: Maybe<ObjectManagerFrontendAttributesPayload>;
  /** Online notifications for a given user */
  onlineNotifications: OnlineNotificationConnection;
  /** Fetch an organization by ID */
  organization: Organization;
  /** Fetch the version of Zammad */
  productAbout: Scalars['String'];
  /** Fetch public links */
  publicLinks?: Maybe<Array<PublicLink>>;
  /** Generic object search */
  search: Array<SearchResult>;
  /** The sessionId of the currently authenticated user. */
  sessionId: Scalars['String'];
  /** Fetch a ticket by ID */
  ticket: Ticket;
  /** Fetch a ticket by ID */
  ticketArticles: TicketArticleConnection;
  /** Ticket overviews available in the system */
  ticketOverviews: OverviewConnection;
  /** Fetch tickets of a given ticket overview */
  ticketsByOverview: TicketConnection;
  /** Translations for a given locale */
  translations?: Maybe<TranslationsPayload>;
  /** Fetch a user information by ID */
  user: User;
};


/** All available queries */
export type QueriesAutocompleteSearchRecipientArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** All available queries */
export type QueriesAutocompleteSearchTagArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** All available queries */
export type QueriesAutocompleteSearchUserArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};


/** All available queries */
export type QueriesFormUpdaterArgs = {
  data: Scalars['JSON'];
  formUpdaterId: EnumFormUpdaterId;
  id?: InputMaybe<Scalars['ID']>;
  meta: FormUpdaterMetaInput;
  relationFields: Array<FormUpdaterRelationField>;
};


/** All available queries */
export type QueriesLocalesArgs = {
  onlyActive?: InputMaybe<Scalars['Boolean']>;
};


/** All available queries */
export type QueriesObjectManagerFrontendAttributesArgs = {
  object: EnumObjectManagerObjects;
};


/** All available queries */
export type QueriesOnlineNotificationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** All available queries */
export type QueriesOrganizationArgs = {
  organization: LocatorOrganizationInput;
};


/** All available queries */
export type QueriesPublicLinksArgs = {
  screen: EnumPublicLinksScreen;
};


/** All available queries */
export type QueriesSearchArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  onlyIn?: InputMaybe<EnumSearchableModels>;
  search: Scalars['String'];
};


/** All available queries */
export type QueriesTicketArgs = {
  ticket: LocatorTicketInput;
};


/** All available queries */
export type QueriesTicketArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  ticket: LocatorTicketInput;
};


/** All available queries */
export type QueriesTicketOverviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** All available queries */
export type QueriesTicketsByOverviewArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<Scalars['String']>;
  orderDirection?: InputMaybe<EnumOrderDirection>;
  overviewId: Scalars['ID'];
};


/** All available queries */
export type QueriesTranslationsArgs = {
  cacheKey?: InputMaybe<Scalars['String']>;
  locale: Scalars['String'];
};


/** All available queries */
export type QueriesUserArgs = {
  user: LocatorUserInput;
};

/** Roles */
export type Role = {
  __typename?: 'Role';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Objects found by search */
export type SearchResult = Organization | Ticket | User;

/** Represents a stored file. */
export type StoredFile = {
  __typename?: 'StoredFile';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  /** Internal database ID */
  internalId: Scalars['Int'];
  /** File name. */
  name: Scalars['String'];
  preferences?: Maybe<Scalars['JSON']>;
  /** File size in bytes */
  size?: Maybe<Scalars['Int']>;
  /** File's content-type. */
  type?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** All available subscriptions */
export type Subscriptions = {
  __typename?: 'Subscriptions';
  /** Application update/change events */
  appMaintenance: AppMaintenancePayload;
  /** Updates to configuration settings */
  configUpdates: ConfigUpdatesPayload;
  /** Updates unseen notifications count */
  onlineNotificationsCount: OnlineNotificationsCountPayload;
  /** Updates to organization records */
  organizationUpdates: OrganizationUpdatesPayload;
  /** Updates to public links */
  publicLinkUpdates: PublicLinkUpdatesPayload;
  /** Broadcast messages to all users */
  pushMessages: PushMessagesPayload;
  /** Updates to ticket records */
  ticketUpdates: TicketUpdatesPayload;
  /** Updates to user records */
  userUpdates: UserUpdatesPayload;
};


/** All available subscriptions */
export type SubscriptionsOnlineNotificationsCountArgs = {
  userId: Scalars['ID'];
};


/** All available subscriptions */
export type SubscriptionsOrganizationUpdatesArgs = {
  organizationId: Scalars['ID'];
};


/** All available subscriptions */
export type SubscriptionsPublicLinkUpdatesArgs = {
  screen: EnumPublicLinksScreen;
};


/** All available subscriptions */
export type SubscriptionsTicketUpdatesArgs = {
  ticketId: Scalars['ID'];
};


/** All available subscriptions */
export type SubscriptionsUserUpdatesArgs = {
  userId: Scalars['ID'];
};

/** Autogenerated return type of TagAssignmentAdd. */
export type TagAssignmentAddPayload = {
  __typename?: 'TagAssignmentAddPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the mutation successful? */
  success?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of TagAssignmentRemove. */
export type TagAssignmentRemovePayload = {
  __typename?: 'TagAssignmentRemovePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** Was the mutation successful? */
  success?: Maybe<Scalars['Boolean']>;
};

/** Assigned tags */
export type TagsInterface = {
  tags: Array<Scalars['String']>;
};

/** Tickets */
export type Ticket = ObjectAttributeValuesInterface & TagsInterface & {
  __typename?: 'Ticket';
  articleCount?: Maybe<Scalars['Int']>;
  articles: TicketArticleConnection;
  closeAt?: Maybe<Scalars['ISO8601DateTime']>;
  closeDiffInMin?: Maybe<Scalars['Int']>;
  closeEscalationAt?: Maybe<Scalars['ISO8601DateTime']>;
  closeInMin?: Maybe<Scalars['Int']>;
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  customer: User;
  escalationAt?: Maybe<Scalars['ISO8601DateTime']>;
  firstResponseAt?: Maybe<Scalars['ISO8601DateTime']>;
  firstResponseDiffInMin?: Maybe<Scalars['Int']>;
  firstResponseEscalationAt?: Maybe<Scalars['ISO8601DateTime']>;
  firstResponseInMin?: Maybe<Scalars['Int']>;
  group: Group;
  id: Scalars['ID'];
  /** Internal database ID */
  internalId: Scalars['Int'];
  lastContactAgentAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastContactAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastContactCustomerAt?: Maybe<Scalars['ISO8601DateTime']>;
  lastOwnerUpdateAt?: Maybe<Scalars['ISO8601DateTime']>;
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  number: Scalars['String'];
  objectAttributeValues?: Maybe<Array<ObjectAttributeValue>>;
  organization?: Maybe<Organization>;
  owner: User;
  pendingTime?: Maybe<Scalars['ISO8601DateTime']>;
  preferences?: Maybe<Scalars['JSON']>;
  priority: TicketPriority;
  state: TicketState;
  tags: Array<Scalars['String']>;
  timeUnit?: Maybe<Scalars['Float']>;
  title: Scalars['String'];
  updateDiffInMin?: Maybe<Scalars['Int']>;
  updateEscalationAt?: Maybe<Scalars['ISO8601DateTime']>;
  updateInMin?: Maybe<Scalars['Int']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};


/** Tickets */
export type TicketArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Ticket articles */
export type TicketArticle = {
  __typename?: 'TicketArticle';
  attachments: Array<StoredFile>;
  body: Scalars['String'];
  cc?: Maybe<AddressesField>;
  contentType: Scalars['String'];
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  from?: Maybe<AddressesField>;
  id: Scalars['ID'];
  inReplyTo?: Maybe<Scalars['String']>;
  internal: Scalars['Boolean'];
  /** Internal database ID */
  internalId: Scalars['Int'];
  messageId?: Maybe<Scalars['String']>;
  messageIdMd5?: Maybe<Scalars['String']>;
  originBy?: Maybe<User>;
  preferences?: Maybe<Scalars['JSON']>;
  references?: Maybe<Scalars['String']>;
  replyTo?: Maybe<AddressesField>;
  sender?: Maybe<TicketArticleType>;
  subject?: Maybe<Scalars['String']>;
  ticket: Ticket;
  to?: Maybe<AddressesField>;
  type?: Maybe<TicketArticleType>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** The connection type for TicketArticle. */
export type TicketArticleConnection = {
  __typename?: 'TicketArticleConnection';
  /** A list of edges. */
  edges: Array<TicketArticleEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TicketArticleEdge = {
  __typename?: 'TicketArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TicketArticle;
};

/** Ticket article types */
export type TicketArticleType = {
  __typename?: 'TicketArticleType';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** The connection type for Ticket. */
export type TicketConnection = {
  __typename?: 'TicketConnection';
  /** A list of edges. */
  edges: Array<TicketEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** Open and closed ticket information */
export type TicketCount = {
  __typename?: 'TicketCount';
  closed: Scalars['Int'];
  open: Scalars['Int'];
};

/** An edge in a connection. */
export type TicketEdge = {
  __typename?: 'TicketEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Ticket;
};

/** Ticket priorities */
export type TicketPriority = {
  __typename?: 'TicketPriority';
  active: Scalars['Boolean'];
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  defaultCreate: Scalars['Boolean'];
  id: Scalars['ID'];
  name: Scalars['String'];
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  uiColor?: Maybe<Scalars['String']>;
  uiIcon?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Ticket states */
export type TicketState = {
  __typename?: 'TicketState';
  active: Scalars['Boolean'];
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  defaultCreate: Scalars['Boolean'];
  defaultFollowUp: Scalars['Boolean'];
  id: Scalars['ID'];
  ignoreEscalation: Scalars['Boolean'];
  name: Scalars['String'];
  nextStateId?: Maybe<Scalars['Int']>;
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  stateType: TicketStateType;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Ticket state types */
export type TicketStateType = {
  __typename?: 'TicketStateType';
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  id: Scalars['ID'];
  name: Scalars['String'];
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
};

/** Autogenerated return type of TicketUpdates. */
export type TicketUpdatesPayload = {
  __typename?: 'TicketUpdatesPayload';
  /** Updated ticket */
  ticket?: Maybe<Ticket>;
  /** Updated ticket article (optional) */
  ticketArticle?: Maybe<TicketArticle>;
};

/** Autogenerated return type of Translations. */
export type TranslationsPayload = {
  __typename?: 'TranslationsPayload';
  /** Cache key that the front end should use to cache the new translation data. */
  cacheKey?: Maybe<Scalars['String']>;
  /** If this is true, then the front end's translation cache is still valid and should be used, cacheKey and translation will not be returned. */
  isCacheStillValid: Scalars['Boolean'];
  /** The actual translation data as Hash where keys are source and values target strings (excluding untranslated strings). */
  translations?: Maybe<Scalars['JSON']>;
};

/** A file to be uploaded. */
export type UploadFileInput = {
  /** File content */
  content: Scalars['BinaryString'];
  /** File name. */
  name: Scalars['String'];
  /** File's content-type. */
  type?: InputMaybe<Scalars['String']>;
};

/** Users (admins, agents and customers) */
export type User = ObjectAttributeValuesInterface & TagsInterface & {
  __typename?: 'User';
  active?: Maybe<Scalars['Boolean']>;
  /** Create date/time of the record */
  createdAt: Scalars['ISO8601DateTime'];
  /** User that created this record */
  createdBy: User;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  imageSource?: Maybe<Scalars['String']>;
  /** Internal database ID */
  internalId: Scalars['Int'];
  lastname?: Maybe<Scalars['String']>;
  login?: Maybe<Scalars['String']>;
  mobile?: Maybe<Scalars['String']>;
  /** Internal note */
  note?: Maybe<Scalars['String']>;
  objectAttributeValues?: Maybe<Array<ObjectAttributeValue>>;
  organization?: Maybe<Organization>;
  outOfOffice?: Maybe<Scalars['Boolean']>;
  outOfOfficeEndAt?: Maybe<Scalars['ISO8601Date']>;
  outOfOfficeReplacementId?: Maybe<Scalars['Int']>;
  outOfOfficeStartAt?: Maybe<Scalars['ISO8601Date']>;
  permissions?: Maybe<UserPermission>;
  phone?: Maybe<Scalars['String']>;
  preferences?: Maybe<Scalars['JSON']>;
  secondaryOrganizations?: Maybe<OrganizationConnection>;
  tags: Array<Scalars['String']>;
  ticketsCount?: Maybe<TicketCount>;
  /** Last update date/time of the record */
  updatedAt: Scalars['ISO8601DateTime'];
  /** Last user that updated this record */
  updatedBy: User;
  verified?: Maybe<Scalars['Boolean']>;
  vip?: Maybe<Scalars['Boolean']>;
  web?: Maybe<Scalars['String']>;
};


/** Users (admins, agents and customers) */
export type UserSecondaryOrganizationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Autogenerated return type of UserAdd. */
export type UserAddPayload = {
  __typename?: 'UserAddPayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** The created user. */
  user?: Maybe<User>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Indicates the total number of available records. */
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** Represents an error in the input of a mutation. */
export type UserError = {
  __typename?: 'UserError';
  field?: Maybe<Scalars['String']>;
  message: Scalars['String'];
};

/** The user add/update fields. */
export type UserInput = {
  /** The user active flag */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The user email */
  email: Scalars['String'];
  /** The user fax */
  fax?: InputMaybe<Scalars['String']>;
  /** The user first name */
  firstname?: InputMaybe<Scalars['String']>;
  /** The user last name */
  lastname?: InputMaybe<Scalars['String']>;
  /** The user mobile */
  mobile?: InputMaybe<Scalars['String']>;
  /** The user note */
  note?: InputMaybe<Scalars['String']>;
  /** Additional custom attributes (names + values) */
  objectAttributeValues?: InputMaybe<Array<ObjectAttributeValueInput>>;
  /** The organization the user belongs to */
  organizationId?: InputMaybe<Scalars['Int']>;
  /** The user password */
  password?: InputMaybe<Scalars['String']>;
  /** The user phone */
  phone?: InputMaybe<Scalars['String']>;
  /** The user vip flag */
  vip?: InputMaybe<Scalars['Boolean']>;
  /** The user web */
  web?: InputMaybe<Scalars['String']>;
};

/** Permissions for the current user */
export type UserPermission = {
  __typename?: 'UserPermission';
  ids: Array<Scalars['Int']>;
  names: Array<Scalars['String']>;
};

/** Autogenerated return type of UserUpdate. */
export type UserUpdatePayload = {
  __typename?: 'UserUpdatePayload';
  /** Errors encountered during execution of the mutation. */
  errors?: Maybe<Array<UserError>>;
  /** The created user. */
  user?: Maybe<User>;
};

/** Autogenerated return type of UserUpdates. */
export type UserUpdatesPayload = {
  __typename?: 'UserUpdatesPayload';
  /** Updated user */
  user?: Maybe<User>;
};

export type OrganizationAttributesFragment = { __typename?: 'Organization', id: string, internalId: number, name?: string | null, shared?: boolean | null, domain?: string | null, domainAssignment?: boolean | null, active?: boolean | null, note?: string | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null };

export type OrganizationUpdateMutationVariables = Exact<{
  id: Scalars['ID'];
  input: OrganizationInput;
}>;


export type OrganizationUpdateMutation = { __typename?: 'Mutations', organizationUpdate?: { __typename?: 'OrganizationUpdatePayload', organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, shared?: boolean | null, domain?: string | null, domainAssignment?: boolean | null, active?: boolean | null, note?: string | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type OrganizationQueryVariables = Exact<{
  organizationId?: InputMaybe<Scalars['ID']>;
  organizationInternalId?: InputMaybe<Scalars['Int']>;
  membersCount?: InputMaybe<Scalars['Int']>;
}>;


export type OrganizationQuery = { __typename?: 'Queries', organization: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, shared?: boolean | null, domain?: string | null, domainAssignment?: boolean | null, active?: boolean | null, note?: string | null, members?: { __typename?: 'UserConnection', totalCount: number, edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'User', id: string, internalId: number, image?: string | null, firstname?: string | null, lastname?: string | null, fullname?: string | null, vip?: boolean | null } }> } | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } };

export type OrganizationUpdatesSubscriptionVariables = Exact<{
  organizationId: Scalars['ID'];
}>;


export type OrganizationUpdatesSubscription = { __typename?: 'Subscriptions', organizationUpdates: { __typename?: 'OrganizationUpdatesPayload', organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, shared?: boolean | null, domain?: string | null, domainAssignment?: boolean | null, active?: boolean | null, note?: string | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null } };

export type UserQueryVariables = Exact<{
  userId?: InputMaybe<Scalars['ID']>;
  userInternalId?: InputMaybe<Scalars['Int']>;
  secondaryOrganizationsCount?: InputMaybe<Scalars['Int']>;
}>;


export type UserQuery = { __typename?: 'Queries', user: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, email?: string | null, web?: string | null, vip?: boolean | null, phone?: string | null, mobile?: string | null, fax?: string | null, note?: string | null, active?: boolean | null, secondaryOrganizations?: { __typename?: 'OrganizationConnection', totalCount: number, edges: Array<{ __typename?: 'OrganizationEdge', node: { __typename?: 'Organization', id: string, internalId: number, active?: boolean | null, name?: string | null } }> } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, active?: boolean | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } };

export type AccountAvatarAddMutationVariables = Exact<{
  images: AvatarInput;
}>;


export type AccountAvatarAddMutation = { __typename?: 'Mutations', accountAvatarAdd?: { __typename?: 'AccountAvatarAddPayload', avatar?: { __typename?: 'Avatar', id: string, default: boolean, deletable: boolean, initial: boolean, imageFull?: string | null, imageResize?: string | null, createdAt: any, updatedAt: any } | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type AccountAvatarDeleteMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AccountAvatarDeleteMutation = { __typename?: 'Mutations', accountAvatarDelete?: { __typename?: 'AccountAvatarDeletePayload', success: boolean, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type AccountAvatarActiveQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountAvatarActiveQuery = { __typename?: 'Queries', accountAvatarActive?: { __typename?: 'Avatar', id: string, default: boolean, deletable: boolean, initial: boolean, imageFull?: string | null, imageResize?: string | null, createdAt: any, updatedAt: any } | null };

export type AccountLocaleMutationVariables = Exact<{
  locale: Scalars['String'];
}>;


export type AccountLocaleMutation = { __typename?: 'Mutations', accountLocale?: { __typename?: 'AccountLocalePayload', success: boolean, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type SearchQueryVariables = Exact<{
  search: Scalars['String'];
  isAgent: Scalars['Boolean'];
  onlyIn?: InputMaybe<EnumSearchableModels>;
}>;


export type SearchQuery = { __typename?: 'Queries', search: Array<{ __typename?: 'Organization', id: string, internalId: number, active?: boolean | null, name?: string | null, updatedAt: any, members?: { __typename?: 'UserConnection', totalCount: number, edges: Array<{ __typename?: 'UserEdge', node: { __typename?: 'User', id: string, fullname?: string | null } }> } | null, updatedBy?: { __typename?: 'User', id: string, fullname?: string | null }, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } | { __typename?: 'Ticket', id: string, internalId: number, title: string, number: string, updatedAt: any, state: { __typename?: 'TicketState', name: string }, priority?: { __typename?: 'TicketPriority', name: string, defaultCreate: boolean, uiColor?: string | null }, customer: { __typename?: 'User', id: string, fullname?: string | null }, updatedBy?: { __typename?: 'User', id: string, fullname?: string | null } } | { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, image?: string | null, updatedAt: any, organization?: { __typename?: 'Organization', id: string, name?: string | null } | null, updatedBy?: { __typename?: 'User', id: string, fullname?: string | null }, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null }> };

export type TicketArticleAttributesFragment = { __typename?: 'TicketArticle', id: string, internalId: number, subject?: string | null, messageId?: string | null, messageIdMd5?: string | null, inReplyTo?: string | null, contentType: string, references?: string | null, preferences?: any | null, body: string, internal: boolean, createdAt: any, from?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, to?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, cc?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, replyTo?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, attachments: Array<{ __typename?: 'StoredFile', internalId: number, name: string, size?: number | null, type?: string | null, preferences?: any | null }>, createdBy?: { __typename?: 'User', id: string, fullname?: string | null, firstname?: string | null, lastname?: string | null }, type?: { __typename?: 'TicketArticleType', name?: string | null } | null, sender?: { __typename?: 'TicketArticleType', name?: string | null } | null };

export type TicketAttributesFragment = { __typename?: 'Ticket', id: string, internalId: number, number: string, title: string, createdAt: any, updatedAt: any, owner: { __typename?: 'User', id: string, firstname?: string | null, lastname?: string | null }, customer: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null }, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null } | null, state: { __typename?: 'TicketState', id: string, name: string, stateType: { __typename?: 'TicketStateType', name: string } }, group: { __typename?: 'Group', id: string, name?: string | null }, priority: { __typename?: 'TicketPriority', id: string, name: string, defaultCreate: boolean, uiColor?: string | null } };

export type TicketQueryVariables = Exact<{
  ticketId?: InputMaybe<Scalars['ID']>;
  ticketInternalId?: InputMaybe<Scalars['Int']>;
  ticketNumber?: InputMaybe<Scalars['String']>;
}>;


export type TicketQuery = { __typename?: 'Queries', ticket: { __typename?: 'Ticket', id: string, internalId: number, number: string, title: string, createdAt: any, updatedAt: any, owner: { __typename?: 'User', id: string, firstname?: string | null, lastname?: string | null }, customer: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null }, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null } | null, state: { __typename?: 'TicketState', id: string, name: string, stateType: { __typename?: 'TicketStateType', name: string } }, group: { __typename?: 'Group', id: string, name?: string | null }, priority: { __typename?: 'TicketPriority', id: string, name: string, defaultCreate: boolean, uiColor?: string | null } } };

export type TicketArticlesQueryVariables = Exact<{
  ticketId?: InputMaybe<Scalars['ID']>;
  ticketInternalId?: InputMaybe<Scalars['Int']>;
  ticketNumber?: InputMaybe<Scalars['String']>;
  cursor?: InputMaybe<Scalars['String']>;
  pageSize?: InputMaybe<Scalars['Int']>;
  isAgent: Scalars['Boolean'];
  loadDescription?: InputMaybe<Scalars['Boolean']>;
}>;


export type TicketArticlesQuery = { __typename?: 'Queries', description: { __typename?: 'TicketArticleConnection', edges: Array<{ __typename?: 'TicketArticleEdge', node: { __typename?: 'TicketArticle', id: string, internalId: number, subject?: string | null, messageId?: string | null, messageIdMd5?: string | null, inReplyTo?: string | null, contentType: string, references?: string | null, preferences?: any | null, body: string, internal: boolean, createdAt: any, from?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, to?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, cc?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, replyTo?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, attachments: Array<{ __typename?: 'StoredFile', internalId: number, name: string, size?: number | null, type?: string | null, preferences?: any | null }>, createdBy?: { __typename?: 'User', id: string, fullname?: string | null, firstname?: string | null, lastname?: string | null }, type?: { __typename?: 'TicketArticleType', name?: string | null } | null, sender?: { __typename?: 'TicketArticleType', name?: string | null } | null } }> }, articles: { __typename?: 'TicketArticleConnection', totalCount: number, edges: Array<{ __typename?: 'TicketArticleEdge', cursor: string, node: { __typename?: 'TicketArticle', id: string, internalId: number, subject?: string | null, messageId?: string | null, messageIdMd5?: string | null, inReplyTo?: string | null, contentType: string, references?: string | null, preferences?: any | null, body: string, internal: boolean, createdAt: any, from?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, to?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, cc?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, replyTo?: { __typename?: 'AddressesField', raw: string, parsed?: Array<{ __typename?: 'EmailAddress', name?: string | null, emailAddress?: string | null }> | null } | null, attachments: Array<{ __typename?: 'StoredFile', internalId: number, name: string, size?: number | null, type?: string | null, preferences?: any | null }>, createdBy?: { __typename?: 'User', id: string, fullname?: string | null, firstname?: string | null, lastname?: string | null }, type?: { __typename?: 'TicketArticleType', name?: string | null } | null, sender?: { __typename?: 'TicketArticleType', name?: string | null } | null } }>, pageInfo: { __typename?: 'PageInfo', startCursor?: string | null, hasPreviousPage: boolean } } };

export type TicketsByOverviewQueryVariables = Exact<{
  overviewId: Scalars['ID'];
  orderBy?: InputMaybe<Scalars['String']>;
  orderDirection?: InputMaybe<EnumOrderDirection>;
  cursor?: InputMaybe<Scalars['String']>;
  showPriority: Scalars['Boolean'];
  showUpdatedBy: Scalars['Boolean'];
  pageSize?: InputMaybe<Scalars['Int']>;
  withObjectAttributes?: InputMaybe<Scalars['Boolean']>;
}>;


export type TicketsByOverviewQuery = { __typename?: 'Queries', ticketsByOverview: { __typename?: 'TicketConnection', totalCount: number, edges: Array<{ __typename?: 'TicketEdge', cursor: string, node: { __typename?: 'Ticket', id: string, internalId: number, number: string, title: string, createdAt: any, updatedAt: any, updatedBy?: { __typename?: 'User', id: string, fullname?: string | null }, customer: { __typename?: 'User', id: string, firstname?: string | null, lastname?: string | null, fullname?: string | null }, organization?: { __typename?: 'Organization', id: string, name?: string | null } | null, state: { __typename?: 'TicketState', id: string, name: string, stateType: { __typename?: 'TicketStateType', name: string } }, group: { __typename?: 'Group', id: string, name?: string | null }, priority?: { __typename?: 'TicketPriority', id: string, name: string, uiColor?: string | null, defaultCreate: boolean }, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type TicketUpdatesSubscriptionVariables = Exact<{
  ticketId: Scalars['ID'];
}>;


export type TicketUpdatesSubscription = { __typename?: 'Subscriptions', ticketUpdates: { __typename?: 'TicketUpdatesPayload', ticket?: { __typename?: 'Ticket', id: string, internalId: number, number: string, title: string, createdAt: any, updatedAt: any, owner: { __typename?: 'User', id: string, firstname?: string | null, lastname?: string | null }, customer: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null }, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null } | null, state: { __typename?: 'TicketState', id: string, name: string, stateType: { __typename?: 'TicketStateType', name: string } }, group: { __typename?: 'Group', id: string, name?: string | null }, priority: { __typename?: 'TicketPriority', id: string, name: string, defaultCreate: boolean, uiColor?: string | null } } | null } };

export type UserAddMutationVariables = Exact<{
  input: UserInput;
}>;


export type UserAddMutation = { __typename?: 'Mutations', userAdd?: { __typename?: 'UserAddPayload', user?: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null } | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type UserUpdateMutationVariables = Exact<{
  id: Scalars['ID'];
  input: UserInput;
}>;


export type UserUpdateMutation = { __typename?: 'Mutations', userUpdate?: { __typename?: 'UserUpdatePayload', user?: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null } | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type FormUploadCacheAddMutationVariables = Exact<{
  formId: Scalars['FormId'];
  files: Array<UploadFileInput> | UploadFileInput;
}>;


export type FormUploadCacheAddMutation = { __typename?: 'Mutations', formUploadCacheAdd?: { __typename?: 'FormUploadCacheAddPayload', uploadedFiles: Array<{ __typename?: 'StoredFile', id: string, name: string, size?: number | null, type?: string | null }> } | null };

export type FormUploadCacheRemoveMutationVariables = Exact<{
  formId: Scalars['FormId'];
  fileIds: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type FormUploadCacheRemoveMutation = { __typename?: 'Mutations', formUploadCacheRemove?: { __typename?: 'FormUploadCacheRemovePayload', success: boolean } | null };

export type FormUpdaterQueryVariables = Exact<{
  formUpdaterId: EnumFormUpdaterId;
  meta: FormUpdaterMetaInput;
  data: Scalars['JSON'];
  relationFields: Array<FormUpdaterRelationField> | FormUpdaterRelationField;
  id?: InputMaybe<Scalars['ID']>;
}>;


export type FormUpdaterQuery = { __typename?: 'Queries', formUpdater: any };

export type ObjectManagerFrontendAttributesQueryVariables = Exact<{
  object: EnumObjectManagerObjects;
}>;


export type ObjectManagerFrontendAttributesQuery = { __typename?: 'Queries', objectManagerFrontendAttributes?: { __typename?: 'ObjectManagerFrontendAttributesPayload', attributes: Array<{ __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null, isInternal: boolean, screens?: any | null }>, screens: Array<{ __typename?: 'ObjectManagerScreenAttributes', name: string, attributes: Array<string> }> } | null };

export type OnlineNotificationDeleteMutationVariables = Exact<{
  onlineNotificationId: Scalars['ID'];
}>;


export type OnlineNotificationDeleteMutation = { __typename?: 'Mutations', onlineNotificationDelete?: { __typename?: 'OnlineNotificationDeletePayload', success: boolean, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type OnlineNotificationMarkAllAsSeenMutationVariables = Exact<{
  onlineNotificationIds: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type OnlineNotificationMarkAllAsSeenMutation = { __typename?: 'Mutations', onlineNotificationMarkAllAsSeen?: { __typename?: 'OnlineNotificationMarkAllAsSeenPayload', onlineNotifications?: Array<{ __typename?: 'OnlineNotification', id: string, seen: boolean }> | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type OnlineNotificationsQueryVariables = Exact<{ [key: string]: never; }>;


export type OnlineNotificationsQuery = { __typename?: 'Queries', onlineNotifications: { __typename?: 'OnlineNotificationConnection', edges: Array<{ __typename?: 'OnlineNotificationEdge', cursor: string, node: { __typename?: 'OnlineNotification', id: string, seen: boolean, createdAt: any, typeName: string, objectName: string, objectId: number, createdBy: { __typename?: 'User', id: string, fullname?: string | null, lastname?: string | null, firstname?: string | null, email?: string | null, vip?: boolean | null, outOfOffice?: boolean | null, active?: boolean | null, image?: string | null }, metaObject: { __typename?: 'DataPrivacyTask' } | { __typename?: 'Group' } | { __typename?: 'Organization' } | { __typename?: 'Role' } | { __typename?: 'Ticket', id: string, internalId: number, title: string } | { __typename?: 'TicketArticle' } | { __typename?: 'User' } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type OnlineNotificationsCountSubscriptionVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type OnlineNotificationsCountSubscription = { __typename?: 'Subscriptions', onlineNotificationsCount: { __typename?: 'OnlineNotificationsCountPayload', unseenCount: number } };

export type PublicLinksQueryVariables = Exact<{
  screen: EnumPublicLinksScreen;
}>;


export type PublicLinksQuery = { __typename?: 'Queries', publicLinks?: Array<{ __typename?: 'PublicLink', id: string, link: string, title: string, description?: string | null, newTab: boolean }> | null };

export type PublicLinkUpdatesSubscriptionVariables = Exact<{
  screen: EnumPublicLinksScreen;
}>;


export type PublicLinkUpdatesSubscription = { __typename?: 'Subscriptions', publicLinkUpdates: { __typename?: 'PublicLinkUpdatesPayload', publicLinks?: Array<{ __typename?: 'PublicLink', id: string, link: string, title: string, description?: string | null, newTab: boolean }> | null } };

export type TicketOverviewsQueryVariables = Exact<{
  withTicketCount: Scalars['Boolean'];
}>;


export type TicketOverviewsQuery = { __typename?: 'Queries', ticketOverviews: { __typename?: 'OverviewConnection', edges: Array<{ __typename?: 'OverviewEdge', cursor: string, node: { __typename?: 'Overview', id: string, name: string, link: string, prio: number, orderBy: string, orderDirection: EnumOrderDirection, active: boolean, ticketCount?: number, viewColumns: Array<{ __typename?: 'KeyValue', key: string, value?: string | null }>, orderColumns: Array<{ __typename?: 'KeyValue', key: string, value?: string | null }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type CurrentUserAttributesFragment = { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, permissions?: { __typename?: 'UserPermission', names: Array<string> } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null };

export type ErrorsFragment = { __typename?: 'UserError', message: string, field?: string | null };

export type ObjectAttributeValuesFragment = { __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } };

export type PublicLinkAttributesFragment = { __typename?: 'PublicLink', id: string, link: string, title: string, description?: string | null, newTab: boolean };

export type UserAttributesFragment = { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null };

export type UserDetailAttributesFragment = { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, email?: string | null, web?: string | null, vip?: boolean | null, phone?: string | null, mobile?: string | null, fax?: string | null, note?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, active?: boolean | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null };

export type LoginMutationVariables = Exact<{
  input: LoginInput;
}>;


export type LoginMutation = { __typename?: 'Mutations', login?: { __typename?: 'LoginPayload', sessionId?: string | null, errors?: Array<{ __typename?: 'UserError', message: string, field?: string | null }> | null } | null };

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = { __typename?: 'Mutations', logout?: { __typename?: 'LogoutPayload', success: boolean } | null };

export type ProductAboutQueryVariables = Exact<{ [key: string]: never; }>;


export type ProductAboutQuery = { __typename?: 'Queries', productAbout: string };

export type ApplicationBuildChecksumQueryVariables = Exact<{ [key: string]: never; }>;


export type ApplicationBuildChecksumQuery = { __typename?: 'Queries', applicationBuildChecksum: string };

export type ApplicationConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type ApplicationConfigQuery = { __typename?: 'Queries', applicationConfig: Array<{ __typename?: 'KeyComplexValue', key: string, value?: any | null }> };

export type AutocompleteSearchRecipientQueryVariables = Exact<{
  query: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
}>;


export type AutocompleteSearchRecipientQuery = { __typename?: 'Queries', autocompleteSearchRecipient: Array<{ __typename?: 'AutocompleteEntry', value: string, label: string, labelPlaceholder?: Array<string> | null, heading?: string | null, headingPlaceholder?: Array<string> | null, disabled?: boolean | null, icon?: string | null }> };

export type AutocompleteSearchUserQueryVariables = Exact<{
  query: Scalars['String'];
  limit?: InputMaybe<Scalars['Int']>;
}>;


export type AutocompleteSearchUserQuery = { __typename?: 'Queries', autocompleteSearchUser: Array<{ __typename?: 'AutocompleteEntry', value: string, label: string, labelPlaceholder?: Array<string> | null, heading?: string | null, headingPlaceholder?: Array<string> | null, disabled?: boolean | null, icon?: string | null }> };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Queries', currentUser: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, permissions?: { __typename?: 'UserPermission', names: Array<string> } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null } };

export type LocalesQueryVariables = Exact<{
  onlyActive?: InputMaybe<Scalars['Boolean']>;
}>;


export type LocalesQuery = { __typename?: 'Queries', locales: Array<{ __typename?: 'Locale', locale: string, alias?: string | null, name: string, dir: EnumTextDirection, active: boolean }> };

export type SessionIdQueryVariables = Exact<{ [key: string]: never; }>;


export type SessionIdQuery = { __typename?: 'Queries', sessionId: string };

export type TranslationsQueryVariables = Exact<{
  locale: Scalars['String'];
  cacheKey?: InputMaybe<Scalars['String']>;
}>;


export type TranslationsQuery = { __typename?: 'Queries', translations?: { __typename?: 'TranslationsPayload', isCacheStillValid: boolean, cacheKey?: string | null, translations?: any | null } | null };

export type AppMaintenanceSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type AppMaintenanceSubscription = { __typename?: 'Subscriptions', appMaintenance: { __typename?: 'AppMaintenancePayload', type?: EnumAppMaintenanceType | null } };

export type ConfigUpdatesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type ConfigUpdatesSubscription = { __typename?: 'Subscriptions', configUpdates: { __typename?: 'ConfigUpdatesPayload', setting?: { __typename?: 'KeyComplexValue', key: string, value?: any | null } | null } };

export type CurrentUserUpdatesSubscriptionVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type CurrentUserUpdatesSubscription = { __typename?: 'Subscriptions', userUpdates: { __typename?: 'UserUpdatesPayload', user?: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, preferences?: any | null, permissions?: { __typename?: 'UserPermission', names: Array<string> } | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, name?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null } | null } | null } };

export type PushMessagesSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type PushMessagesSubscription = { __typename?: 'Subscriptions', pushMessages: { __typename?: 'PushMessagesPayload', title?: string | null, text?: string | null } };

export type UserUpdatesSubscriptionVariables = Exact<{
  userId: Scalars['ID'];
}>;


export type UserUpdatesSubscription = { __typename?: 'Subscriptions', userUpdates: { __typename?: 'UserUpdatesPayload', user?: { __typename?: 'User', id: string, internalId: number, firstname?: string | null, lastname?: string | null, fullname?: string | null, image?: string | null, email?: string | null, web?: string | null, vip?: boolean | null, phone?: string | null, mobile?: string | null, fax?: string | null, note?: string | null, active?: boolean | null, objectAttributeValues?: Array<{ __typename?: 'ObjectAttributeValue', value?: any | null, attribute: { __typename?: 'ObjectManagerFrontendAttribute', name: string, display: string, dataType: string, dataOption?: any | null } }> | null, organization?: { __typename?: 'Organization', id: string, internalId: number, name?: string | null, active?: boolean | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } | null, ticketsCount?: { __typename?: 'TicketCount', open: number, closed: number } | null } | null } };
